plugins {
    id 'com.github.johnrengelman.shadow'
}

dependencies {
    compileOnly(rootProject)
    compileOnly('com.github.Anuken:Mindustry:v126')
}
sourceSets.main.resources.srcDirs = ['res/']

// Folder with a Mindustry.jar executable and game server (mindustry/)
String devPath = System.getenv('DEV_SERVERS')
if (devPath != null) {
    String gamePath
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        gamePath = System.getenv('AppData') + '/Mindustry/'
    } else {
        gamePath = System.getenv('XDG_DATA_HOME')
        if (gamePath != null) {
            if (!gamePath.endsWith('/')) {
                gamePath += '/'
            }
            gamePath += 'Mindustry/'
        } else {
            gamePath = "${System.getProperty('user.home')}/.local/share/Mindustry/"
        }
    }

    task buildAndRun {
        dependsOn(tasks.shadowJar)
        dependsOn(rootProject.tasks.shadowJar)
        doLast {
            Thread.sleep(1000)

            // Copy mods to game
            copy {
                from "${rootProject.buildDir}/libs/${rootProject.shadowJar.archiveFileName.get()}"
                into "$gamePath/mods"
            }
            copy {
                from "$buildDir/libs/${shadowJar.archiveFileName.get()}"
                into "$gamePath/mods"
            }

            // Copy mods to dev server
            copy {
                from "${rootProject.buildDir}/libs/${rootProject.shadowJar.archiveFileName.get()}"
                into "$devPath/mindustry/config/mods"
            }
            copy {
                from "$buildDir/libs/${shadowJar.archiveFileName.get()}"
                into "$devPath/mindustry/config/mods"
            }

            // Run the game
            ProcessBuilder builder = new ProcessBuilder()
            builder.command('java', '-jar', 'Mindustry.jar')
            builder.directory(new File(devPath as String))
            builder.start().waitForProcessOutput(System.out, System.err)
        }
    }
}
if (androidSDK != null) {
    task buildAndDex(type: Jar) {
        dependsOn(tasks.shadowJar)
        archiveName(project.name + '-dexed.jar')

        File dexFile = new File(tasks.buildAndDex.temporaryDir, 'dex.jar')
        File jarFile = tasks.shadowJar.archiveFile.get().asFile

        doFirst {
            exec {
                workingDir(tasks.buildAndDex.temporaryDir)

                File d8path = new File(new File(androidSDK, 'build-tools').listFiles().last(), 'd8.bat')
                File platforms = new File(androidSDK, 'platforms')
                File androidJar = platforms.listFiles().reverse().find { it.isDirectory() && new File(it, 'android.jar').exists() }
                List<File> files = configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(androidJar, 'android.jar')]

                List<String> command = [
                    d8path,
                    *files.collect { "--classpath $it.path" },
                    '--min-api', '14',
                    '--output', dexFile, jarFile
                ]

                commandLine('cmd', '/C', command.join(' '))
            }
        }

        from(zipTree(jarFile), zipTree(dexFile))
    }
}